from a1_design import *
import unittest

class Test_Inits(unittest.TestCase):

    def test_matrix_one_row(self):
        a = Matrix([[1,2,3,4]],(1))
        result = a.get_row(1)
        self.assertEqual(result, [1,2,3,4])

    def test_matrix_multi_rows(self):
        a = Matrix([[1,"A",6,"b"],["b",8,10,"D"]],(1,2))
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result2, ["b",8,10,"D"])
        self.assertEqual(result1, [1,"A",6,"b"])

    def test_square_matrix(self):
        a = Square_matrix([[1,"C",3],[4,5,"B"],["A",8,9]], (1,2,3))
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result2, [4,5,"B"])
        self.assertEqual(result1, [1,"C",3])
        self.assertEqual(result3, ["A",8,9])

    def test_symmetric_matrix(self):
        a = Symmetric_matrix([[1,2,3],[2,4,5],[3,5,8]], (1,2,3))
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result2, [2,4,5])
        self.assertEqual(result1, [1,2,3])
        self.assertEqual(result3, [3,5,8])

    def test_matrix_1d_row(self):
        a = Matrix_1d("row",[1,2,3,"a"])
        result1 = a.get_row(1)
        self.assertEqual(result1, [1,2,3,"a"])

    def test_matrix_1d_col(self):
        a = Matrix_1d(None,(1,2,3,4),[1,2,3,"a"])
        result1 = a.get_column(1)
        result2 = a.get_column(3)
        result3 = a.get_column(4)
        self.assertEqual(result2, 3)
        self.assertEqual(result1, 1)
        self.assertEqual(result3, "a")


class Test_Methods_Matrix(unittest.TestCase):

    def test_add_matrix(self):
        a = Matrix([[1,2,3],[4,5,6]],(1,2))
        b = Matrix([[10,20,30],[40,50,60]],(1,2))
        a.add_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [11,22,33])
        self.assertEqual(result2, [44,55,66])

    def test_add_matrix_improper_data_type(self):
        a = Matrix([[1,"C",3],[4,5,"B"]], (1,2))
        b = Matrix([[10,20,30],[40,50,60]],(1,2))
        with self.assertRaises(ImproperAdditionException):
            a.add_matrix(b)

    def test_add_matrix_exception(self):
        a = Matrix([[1,2,3],[2,4,5],[3,5,8]], (1,2,3))
        b = Matrix([[10,20,30],[40,50,60]],(1,2))
        with self.assertRaises(ImproperAdditionException):
            a.add_matrix(b)

    def test_subtract_matrix(self):
        a = Matrix([[10,20,30],[40,50,60]],(1,2))
        b = Matrix([[1,2,3],[4,5,6]],(1,2))
        a.subtract_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [9,18,27])
        self.assertEqual(result2, [36,45,54])

    def test_subtract_matrix_improper_data_type(self):
        a = Matrix([[1,"C",3],[4,5,"B"]], (1,2))
        b = Matrix([[10,20,30],[40,50,60]],(1,2))
        with self.assertRaises(ImproperSubtractionException):
            a.subtract_matrix(b)

    def test_subtract_matrix_exception(self):
        a = Matrix([[1,2,3],[2,4,5],[3,5,8]], (1,2,3))
        b = Matrix([[10,20,30],[40,50,60]],(1,2))
        with self.assertRaises(ImproperSubtractionException):
            a.subtract_matrix(b)

    def test_multiply_matrix(self):
        a = Matrix([[1,2],[3,4]],(1,2))
        b = Matrix([[5,6],[7,8]],(1,2))
        a.multiply_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [19,22])
        self.assertEqual(result2, [43,50])

    def test_multiply_matrix_scaler(self):
        a = Matrix([[100,200],[300,400]],(1,2))
        a.multiply_matrix(None,2)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [200,400])
        self.assertEqual(result2, [600,800])

    def test_multiply_matrix_diff_size(self):
        a = Matrix([[1,2,3],[4,5,6]],(1,2,3))
        b = Matrix([[1,2],[3,4],[5,0]],(1,2))
        a.multiply_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [22,10])
        self.assertEqual(result2, [22,10],[49,28])

    def test_multiply_matrix_diff_size_exception(self):
        a = Matrix([[1,2,3],[4,5,6]],(1,2))
        b = Matrix([[1],[3],[5]],(1,2,3))
        with self.assertRaises(ImproperAdditionException):
            a.multiply_matrix(b)

    def test_get_value(self):
        a = Matrix([[1,2,3],[4,5,6]],(1,2))
        result = a.get_value(2,2)
        self.assertEqual(result, 5)

    def test_get_value_exception(self):
        a = Matrix([[1,2,3],[4,5,6]],(1,2))
        with self.assertRaises(OutOfBoundMatrixException):
            a.get_value(2,4)

    def test_set_value(self):
        a = Matrix([[1,2,3],[4,5,6]],(1,2))
        a.set_value(2,2,"a")
        result = a.get_row(2)
        self.assertEqual(result, [4,"a",6])

    def test_set_value_exception(self):
        a = Matrix([[1,2,3],[4,5,6]],(1,2))
        with self.assertRaises(OutOfBoundMatrixException):
            a.set_value(2,4,"b")

    def test_set_value_exception(self):
        a = Matrix([[1,2,3],[4,5,6]],(1,2))
        with self.assertRaises(OutOfBoundMatrixException):
            a.get_row(3)

    def test_transpose(self):
        a = Matrix([[1,2,3],[4,5,6]],(1,2))
        a.transpose()
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [1,4])
        self.assertEqual(result2, [2,5])
        self.assertEqual(result3, [3,6])

    def test_transpose_exception(self):
        a = Matrix()
        with self.assertRaises(EmptyMatrixException):
            a.transpose()

    def test_swap_row(self):
        a = Matrix([[1,2,3],[2,4,5],[3,5,8]], (1,2,3))
        a.swap_row((2,3))
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [1,2,3])
        self.assertEqual(result2, [3,5,8])
        self.assertEqual(result3, [2,4,5])

    def test_swap_row_with_column(self):
        a = Matrix([[1,2],[4,5]],(1,2))
        a.swap_row((2,2),"col")
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [1,4])
        self.assertEqual(result2, [2,5])

    def test_swap_row_with_col_exception(self):
        a = Matrix([[1,2],[4,3],[3,4]],(1,2))
        with self.assertRaises(ImproperSwapException):
            a.swap_row((1,2),"col")

    def test_swap_col(self):
        a = Matrix([[1,2,3],[2,4,5],[3,5,8]], (1,2,3))
        a.swap_col((2,3))
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [1,3,2])
        self.assertEqual(result2, [3,8,5])
        self.assertEqual(result3, [2,5,4])

    def test_swap_col_with_row(self):
        a = Matrix([[1,2],[4,5]],(1,2))
        a.swap_col((2,2),"row")
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [1,4])
        self.assertEqual(result2, [2,5])

    def test_swap_col_with_row_exception(self):
        a = Matrix([[1,2],[4,3],[3,4]],(1,2))
        with self.assertRaises(ImproperSwapException):
            a.swap_col((1,2),"row")

    def test_check_dimension_true(self):
        a = Matrix([[1,2],[4,5]],(1,2))
        result = a.check_dimension(2,2)
        self.assertEqual(result, True)

    def test_check_dimension_false(self):
        a = Matrix([[1,2],[4,5]],(1,2))
        result = a.check_dimension(2,1)
        self.assertEqual(result, False)


class Test_Methods_Square_Matrix(unittest.TestCase):


    def test_add_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        b = Square_matrix([[10,20],[40,50]],(1,2))
        a.add_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [11,22])
        self.assertEqual(result2, [44,55])

    def test_add_Square_matrix_improper_data_type(self):
        a = Square_matrix([[1,"C"],[4,5]], (1,2))
        b = Square_matrix([[10,20],[40,50]],(1,2))
        with self.assertRaises(ImproperAdditionException):
            a.add_matrix(b)

    def test_add_Square_matrix_exception(self):
        a = Square_matrix([[1,2,4],[2,4,2],[3,5,1]], (1,2,3))
        b = Square_matrix([[10,20],[40,50]],(1,2))
        with self.assertRaises(ImproperAdditionException):
            a.add_matrix(b)

    def test_subtract_Square_matrix(self):
        a = Square_matrix([[10,20],[40,50]],(1,2))
        b = Square_matrix([[1,2],[4,5]],(1,2))
        a.subtract_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [9,18])
        self.assertEqual(result2, [36,45])

    def test_subtract_Square_matrix_improper_data_type(self):
        a = Square_matrix([[1,"C"],[4,5]], (1,2))
        b = Square_matrix([[10,20],[40,50]],(1,2))
        with self.assertRaises(ImproperSubtractionException):
            a.subtract_matrix(b)

    def test_subtract_Square_matrix_exception(self):
        a = Square_matrix([[1,2],[2,4],[3,5]], (1,2,3))
        b = Square_matrix([[10,20],[40,50]],(1,2))
        with self.assertRaises(ImproperSubtractionException):
            a.subtract_matrix(b)

    def test_multiply_Square_matrix(self):
        a = Square_matrix([[1,2],[3,4]],(1,2))
        b = Square_matrix([[5,6],[7,8]],(1,2))
        a.multiply_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [19,22])
        self.assertEqual(result2, [43,50])

    def test_multiply_Square_matrix_scaler(self):
        a = Square_matrix([[100,200],[300,400]],(1,2))
        a.multiply_matrix(None,2)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [200,400])
        self.assertEqual(result2, [600,800])

    def test_get_value_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        result = a.get_value(2,2)
        self.assertEqual(result, 5)

    def test_get_value_Square_matrix_exception(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        with self.assertRaises(OutOfBoundMatrixException):
            a.get_value(2,4)

    def test_set_value_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        a.set_value(2,1,"a")
        result = a.get_row(2)
        self.assertEqual(result, ["a",6])

    def test_set_value_Square_matrix_exception(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        with self.assertRaises(OutOfBoundMatrixException):
            a.set_value(2,4,"b")

    def test_set_value_exception_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        with self.assertRaises(OutOfBoundMatrixException):
            a.get_row(3)

    def test_transpose_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        a.transpose()
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [1,4])
        self.assertEqual(result2, [2,5])

    def test_transpose_exception_Square_matrix(self):
        a = Square_matrix()
        with self.assertRaises(EmptyMatrixException):
            a.transpose()

    def test_swap_row_Square_matrix(self):
        a = Square_matrix([[1,2],[2,4],[3,5]], (1,2,3))
        a.swap_row((2,3))
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [1,2])
        self.assertEqual(result2, [3,5])
        self.assertEqual(result3, [2,4])

    def test_swap_row_with_column_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        a.swap_row((2,2),"col")
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [1,4])
        self.assertEqual(result2, [2,5])

    def test_swap_row_with_col_exception_Square_matrix(self):
        a = Square_matrix([[1,2],[4,3],[3,4]],(1,2))
        with self.assertRaises(ImproperSwapException):
            a.swap_row((1,2),"col")

    def test_swap_col_Square_matrix(self):
        a = Square_matrix([[1,2],[2,4],[3,5]], (1,2,3))
        a.swap_col((2,3))
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [1,3,2])
        self.assertEqual(result2, [3,8,5])
        self.assertEqual(result3, [2,5,4])

    def test_swap_col_with_row_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        a.swap_col((2,2),"row")
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [1,4])
        self.assertEqual(result2, [2,5])

    def test_swap_col_with_row_exception_Square_matrix(self):
        a = Square_matrix([[1,2],[4,3],[3,4]],(1,2))
        with self.assertRaises(ImproperSwapException):
            a.swap_col((1,2),"row")

    def test_check_dimension_true_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        result = a.check_dimension(2,2)
        self.assertEqual(result, True)

    def test_check_dimension_false_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        result = a.check_dimension(2,1)
        self.assertEqual(result, False)

    def test_get_diagonal_values_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        result = a.get_diagonal_values()
        self.assertEqual(result, [1,5])

    def test_get_diagonal_values_exception_Square_matrix(self):
        a = Square_matrix()
        with self.assertRaises(EmptyMatrixException):
            a.get_diagonal_values()

    def test_set_diagonal_values_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        a.set_diagonal_values([3,6])
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [3,2])
        self.assertEqual(result2, [4,6])

    def test_set_diagonal_values_empty_exception_Square_matrix(self):
        a = Square_matrix()
        with self.assertRaises(EmptyMatrixException):
            a.set_diagonal_values([1,2])

    def test_set_diagonal_values_out_of_bound_exception_Square_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        with self.assertRaises(OutOfBoundMatrixException):
            a.set_diagonal_values([3,4,10])

    def test_set_identity_matrix(self):
        a = Square_matrix()
        a.set_identity_matrix(3)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [1,0,0])
        self.assertEqual(result2, [0,1,0])
        self.assertEqual(result3, [0,0,1])

    def test_determinant_matrix(self):
        a = Square_matrix([[1,2],[4,5]],(1,2))
        result = a.determinant_matrix()
        self.assertEqual(result, -30)

    def test_determinant_matrix_exception(self):
        a = Square_matrix([[1,2],[4,5],[6,5]],(1,2,3))
        with self.assertRaises(InvalidDeterminantMatirxException):
            result = a.determinant_matrix()

class Test_Methods_Symmetric_Matrix(unittest.TestCase):


    def test_add_Symmetric_matrix(self):
        a = Symmetric_matrix([[5,1,3],[2,0,2],[3,1,5]],(1,2,3))
        b = Symmetric_matrix([[3,1,5],[2,0,2],[5,1,3]],(1,2,3))
        a.add_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [8,2,8])
        self.assertEqual(result2, [4,0,4])
        self.assertEqual(result3, [8,2,8])

    def test_add_Symmetric_matrix_improper_data_type(self):
        a = Symmetric_matrix([[5,1,3],[2,0,2],[3,1,5]],(1,2,3))
        b = Symmetric_matrix([["a",1,5],[2,0,2],[5,1,"a"]],(1,2,3))
        with self.assertRaises(ImproperAdditionException):
            a.add_matrix(b)

    def test_add_Symmetric_matrix_exception(self):
        a = Symmetric_matrix([[5,1,3],[2,0,2],[3,1,5]],(1,2,3))
        b = Symmetric_matrix([[1,0],[0,1]],(1,2))
        with self.assertRaises(ImproperAdditionException):
            a.add_matrix(b)

    def test_subtract_Symmetric_matrix(self):
        a = Symmetric_matrix([[5,1,3],[2,0,2],[3,1,5]],(1,2,3))
        b = Symmetric_matrix([[3,1,5],[2,0,2],[5,1,3]],(1,2,3))
        a.subtract_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [2,0,-2])
        self.assertEqual(result2, [0,0,0])
        self.assertEqual(result2, [-2,0,2])


    def test_subtract_Symmetric_matrix_improper_data_type(self):
        a = Symmetric_matrix([[5,"c",3],[2,0,2],[3,"c",5]],(1,2,3))
        b = Symmetric_matrix([[3,1,5],[2,0,2],[5,1,3]],(1,2,3))
        with self.assertRaises(ImproperSubtractionException):
            a.subtract_matrix(b)

    def test_subtract_Symmetric_matrix_exception(self):
        a = Symmetric_matrix([[5,1,3],[2,0,2],[3,1,5]],(1,2,3))
        b = Symmetric_matrix([[1,0],[0,1]],(1,2))
        with self.assertRaises(ImproperSubtractionException):
            a.subtract_matrix(b)

    def test_multiply_Symmetric_matrix(self):
        a = Symmetric_matrix([[1,2],[3,4]],(1,2))
        b = Symmetric_matrix([[5,6],[7,8]],(1,2))
        a.multiply_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [19,22])
        self.assertEqual(result2, [43,50])

    def test_multiply_Symmetric_matrix_scaler(self):
        a = Symmetric_matrix([[100,200],[300,400]],(1,2))
        a.multiply_matrix(None,2)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [200,400])
        self.assertEqual(result2, [600,800])

    def test_multiply_Symmetric_matrix_diff_size(self):
        a = Symmetric_matrix([[1,2,3],[4,5,6]],(1,2,3))
        b = Symmetric_matrix([[1,2],[3,4],[5,0]],(1,2))
        a.multiply_matrix(b)
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [22,10])
        self.assertEqual(result2, [22,10],[49,28])

    def test_multiply_Symmetric_matrix_diff_size_exception(self):
        a = Symmetric_matrix([[1,2,3],[4,5,6]],(1,2))
        b = Symmetric_matrix([[1],[3],[5]],(1,2,3))
        with self.assertRaises(ImproperAdditionException):
            a.multiply_matrix(b)

    def test_get_value_Symmetric_matrix(self):
        a = Symmetric_matrix([[1,2,3],[4,5,6]],(1,2))
        result = a.get_value(2,2)
        self.assertEqual(result, 5)

    def test_get_value_exception_Symmetric_matrix(self):
        a = Symmetric_matrix([[1,2,3],[4,5,6]],(1,2))
        with self.assertRaises(OutOfBoundMatrixException):
            a.get_value(2,4)

    def test_set_value_Symmetric_matrix(self):
        a = Symmetric_matrix([[1,2,3],[4,5,6]],(1,2))
        a.set_value(2,2,"a")
        result = a.get_row(2)
        self.assertEqual(result, [4,"a",6])

    def test_set_value_exception_Symmetric_matrix(self):
        a = Symmetric_matrix([[1,2,3],[4,5,6]],(1,2))
        with self.assertRaises(OutOfBoundMatrixException):
            a.set_value(2,4,"b")

    def test_set_value_exception_Symmetric_matrix(self):
        a = Symmetric_matrix([[1,2,3],[4,5,6]],(1,2))
        with self.assertRaises(OutOfBoundMatrixException):
            a.get_row(3)

    def test_transpose_Symmetric_matrix(self):
        a = Symmetric_matrix([[1,2,3],[4,5,6]],(1,2))
        a.transpose()
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [1,4])
        self.assertEqual(result2, [2,5])
        self.assertEqual(result3, [3,6])

    def test_transpose_exception_Symmetric_matrix(self):
        a = Symmetric_matrix()
        with self.assertRaises(EmptyMatrixException):
            a.transpose()

    def test_swap_row_Symmetric_matrix(self):
        a = Symmetric_matrix([[1,2,3],[2,4,5],[3,5,8]], (1,2,3))
        a.swap_row((2,3))
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [1,2,3])
        self.assertEqual(result2, [3,5,8])
        self.assertEqual(result3, [2,4,5])

    def test_swap_row_with_column_Symmetric_matrix(self):
        a = Symmetric_matrix([[1,2],[4,5]],(1,2))
        a.swap_row((2,2),"col")
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [1,4])
        self.assertEqual(result2, [2,5])

    def test_swap_row_with_col_exception_Symmetric_matrix(self):
        a = Matrix([[1,2],[4,3],[3,4]],(1,2))
        with self.assertRaises(ImproperSwapException):
            a.swap_row((1,2),"col")

    def test_swap_col_Symmetric_matrix(self):
        a = Matrix([[1,2,3],[2,4,5],[3,5,8]], (1,2,3))
        a.swap_col((2,3))
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        result3 = a.get_row(3)
        self.assertEqual(result1, [1,3,2])
        self.assertEqual(result2, [3,8,5])
        self.assertEqual(result3, [2,5,4])

    def test_swap_col_with_row_Symmetric_matrix(self):
        a = Matrix([[1,2],[4,5]],(1,2))
        a.swap_col((2,2),"row")
        result1 = a.get_row(1)
        result2 = a.get_row(2)
        self.assertEqual(result1, [1,4])
        self.assertEqual(result2, [2,5])

    def test_swap_col_with_row_exception_Symmetric_matrix(self):
        a = Matrix([[1,2],[4,3],[3,4]],(1,2))
        with self.assertRaises(ImproperSwapException):
            a.swap_col((1,2),"row")

    def test_check_dimension_true_Symmetric_matrix(self):
        a = Matrix([[1,2],[4,5]],(1,2))
        result = a.check_dimension(2,2)
        self.assertEqual(result, True)

    def test_check_dimension_false_Symmetric_matrix(self):
        a = Matrix([[1,2],[4,5]],(1,2))
        result = a.check_dimension(2,1)
        self.assertEqual(result, False)


unittest.main(exit=False)